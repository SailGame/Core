// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SailGame/Core/data (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	data "github.com/SailGame/Core/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockStorage) CreateRoom() (data.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom")
	ret0, _ := ret[0].(data.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockStorageMockRecorder) CreateRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockStorage)(nil).CreateRoom))
}

// CreateToken mocks base method
func (m *MockStorage) CreateToken(arg0 data.User) (data.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(data.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockStorageMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStorage)(nil).CreateToken), arg0)
}

// CreateUser mocks base method
func (m *MockStorage) CreateUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1)
}

// DelRoom mocks base method
func (m *MockStorage) DelRoom(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelRoom indicates an expected call of DelRoom
func (mr *MockStorageMockRecorder) DelRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelRoom", reflect.TypeOf((*MockStorage)(nil).DelRoom), arg0)
}

// DelToken mocks base method
func (m *MockStorage) DelToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelToken indicates an expected call of DelToken
func (mr *MockStorageMockRecorder) DelToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelToken", reflect.TypeOf((*MockStorage)(nil).DelToken), arg0)
}

// DelUser mocks base method
func (m *MockStorage) DelUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUser indicates an expected call of DelUser
func (mr *MockStorageMockRecorder) DelUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*MockStorage)(nil).DelUser), arg0)
}

// FindProvider mocks base method
func (m *MockStorage) FindProvider(arg0 string) (data.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProvider", arg0)
	ret0, _ := ret[0].(data.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProvider indicates an expected call of FindProvider
func (mr *MockStorageMockRecorder) FindProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProvider", reflect.TypeOf((*MockStorage)(nil).FindProvider), arg0)
}

// FindProviderByGame mocks base method
func (m *MockStorage) FindProviderByGame(arg0 string) []data.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProviderByGame", arg0)
	ret0, _ := ret[0].([]data.Provider)
	return ret0
}

// FindProviderByGame indicates an expected call of FindProviderByGame
func (mr *MockStorageMockRecorder) FindProviderByGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProviderByGame", reflect.TypeOf((*MockStorage)(nil).FindProviderByGame), arg0)
}

// FindRoom mocks base method
func (m *MockStorage) FindRoom(arg0 int32) (data.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoom", arg0)
	ret0, _ := ret[0].(data.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoom indicates an expected call of FindRoom
func (mr *MockStorageMockRecorder) FindRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoom", reflect.TypeOf((*MockStorage)(nil).FindRoom), arg0)
}

// FindToken mocks base method
func (m *MockStorage) FindToken(arg0 string) (data.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindToken", arg0)
	ret0, _ := ret[0].(data.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindToken indicates an expected call of FindToken
func (mr *MockStorageMockRecorder) FindToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindToken", reflect.TypeOf((*MockStorage)(nil).FindToken), arg0)
}

// FindUser mocks base method
func (m *MockStorage) FindUser(arg0, arg1 string) (data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", arg0, arg1)
	ret0, _ := ret[0].(data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser
func (mr *MockStorageMockRecorder) FindUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockStorage)(nil).FindUser), arg0, arg1)
}

// GetProviders mocks base method
func (m *MockStorage) GetProviders() []data.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders")
	ret0, _ := ret[0].([]data.Provider)
	return ret0
}

// GetProviders indicates an expected call of GetProviders
func (mr *MockStorageMockRecorder) GetProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockStorage)(nil).GetProviders))
}

// GetRooms mocks base method
func (m *MockStorage) GetRooms() []data.Room {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRooms")
	ret0, _ := ret[0].([]data.Room)
	return ret0
}

// GetRooms indicates an expected call of GetRooms
func (mr *MockStorageMockRecorder) GetRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRooms", reflect.TypeOf((*MockStorage)(nil).GetRooms))
}

// GetRoomsWithFilter mocks base method
func (m *MockStorage) GetRoomsWithFilter(arg0 func(data.Room) bool) []data.Room {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsWithFilter", arg0)
	ret0, _ := ret[0].([]data.Room)
	return ret0
}

// GetRoomsWithFilter indicates an expected call of GetRoomsWithFilter
func (mr *MockStorageMockRecorder) GetRoomsWithFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsWithFilter", reflect.TypeOf((*MockStorage)(nil).GetRoomsWithFilter), arg0)
}

// GetUsers mocks base method
func (m *MockStorage) GetUsers() []data.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]data.User)
	return ret0
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockStorageMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStorage)(nil).GetUsers))
}

// IsUserExist mocks base method
func (m *MockStorage) IsUserExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist
func (mr *MockStorageMockRecorder) IsUserExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockStorage)(nil).IsUserExist), arg0)
}

// RegisterProvider mocks base method
func (m *MockStorage) RegisterProvider(arg0 data.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProvider", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProvider indicates an expected call of RegisterProvider
func (mr *MockStorageMockRecorder) RegisterProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProvider", reflect.TypeOf((*MockStorage)(nil).RegisterProvider), arg0)
}

// UnRegisterProvider mocks base method
func (m *MockStorage) UnRegisterProvider(arg0 data.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegisterProvider", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegisterProvider indicates an expected call of UnRegisterProvider
func (mr *MockStorageMockRecorder) UnRegisterProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterProvider", reflect.TypeOf((*MockStorage)(nil).UnRegisterProvider), arg0)
}
